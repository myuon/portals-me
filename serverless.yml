service: portals-me

plugins:
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  timeout: 5  
  stage: dev
  region: ap-northeast-1
  tracing: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-identity:*
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'
  
  environment:
    GClientId: 670077302427-0r21asrffhmuhkvfq10qa8kj86cslojn.apps.googleusercontent.com
    EntityTable: ${self:resources.Resources.EntityTable.Properties.TableName}
    JwtPrivate: ${file(./token/jwtES256.key)}
    JwtPublic: ${file(./token/jwtES256.key.pub)}
    TestPort: ${self:custom.dynamodb.start.port}

package:
  excludeDevDependencies: false
  exclude:
    - ./node_modules/**
    - ./client/**
    - ./.git/**
    - ./token/**
    - ./src/**
  include:
    - ./src/functions/**

layers:
  XraySdk:
    path: ./src/layers/xray/

functions:
  authorizer:
    handler: src/functions/auth.authorize
    layers:
      - {Ref: XraySdkLambdaLayer}
  signUp:
    handler: src/functions/auth.signUp
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /signUp
          method: post
          cors: true
  signIn:
    handler: src/functions/auth.signIn
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /signIn
          method: post
          cors: true
  getMe:
    handler: src/functions/auth.getMe
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /users/me
          method: get
          cors: true
          authorizer: authorizer
  projectHandler:
    handler: src/functions/project.handler
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /projects
          method: get
          cors: true
          authorizer: authorizer
      - http:
          path: /projects
          method: post
          cors: true
          authorizer: authorizer
      - http:
          path: /projects/{projectId}
          method: get
          cors: true
          authorizer: authorizer
  commentHandler:
    handler: src/functions/comment.handler
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /comments
          method: post
          cors: true
          authorizer: authorizer
      - http:
          path: /projects/{projectId}/comments
          method: get
          cors: true
          authorizer: authorizer

resources:
  Resources:
    EntityTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: entities
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
          - AttributeName: owned_by
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sort
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: owner
            KeySchema:
              - AttributeName: owned_by
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain

custom:
  dynamodb:
    start:
      port: 3001
      inMemory: true
      migrate: true
      seed: true

    seed:
      domain:
        sources:
          - table: entities
            sources: [ ./tests/migrate/entities.json ]