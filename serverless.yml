# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: portals-me

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  timeout: 5  
  stage: dev
  region: ap-northeast-1
  tracing: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-identity:*
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'
  
  environment:
    GClientId: 670077302427-0r21asrffhmuhkvfq10qa8kj86cslojn.apps.googleusercontent.com
    EntityTable: {Ref: EntityTable}
    JwtPrivate: fs.readFileSync('./token/jwtES256.key', 'utf8'),
    JwtPublic: fs.readFileSync('./token/jwtES256.key.pub', 'utf8'),

# you can add packaging information here
package:
  include:
    - src/functions/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

layers:
  XraySdk:
    path: src/xray-layer

functions:
  authorizer:
    handler: src/functions/auth.authorize
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /users/me
          method: get
  signUp:
    handler: src/functions/auth.signUp
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /signUp
          method: post
          cors: true
  signIn:
    handler: src/functions/auth.signIn
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /signIn
          method: post
          cors: true
  getMe:
    handler: src/functions/auth.getMe
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /users/me
          method: get
          cors: true
  projectHandler:
    handler: src/functions/project.handler
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /projects
          method: get
          cors: true
      - http:
          path: /projects
          method: post
          cors: true
      - http:
          path: /projects/{projectId}
          method: get
          cors: true
  commentHandler:
    handler: src/functions/comment.handler
    layers:
      - {Ref: XraySdkLambdaLayer}
    events:
      - http:
          path: /comments
          method: post
          cors: true
      - http:
          path: /projects/{projectId}/comments
          method: get
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

custom:
  bucket: ${self:service}-layers

resources:
  Resources:
    EntityTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
          - AttributeName: owned_by
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sort
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: owner
            KeySchema:
              - AttributeName: owned_by
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain
