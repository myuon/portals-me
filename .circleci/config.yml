version: 2

jobs:
  test:
    docker:
      - image: golang:1.11.5-stretch
    steps:
      - checkout
      - run: apt update
      - run: apt install -y openjdk-8-jdk unzip
      - run: make install
      - run: go mod download
      - run: wget https://releases.hashicorp.com/terraform/0.11.11/terraform_0.11.11_linux_amd64.zip
      - run: unzip terraform_0.11.11_linux_amd64.zip && cp terraform /usr/local/bin
      - run: cd infrastructure/local && terraform init
      - run: make startTest && make runTest
  build:
    docker:
      - image: node
    steps:
      - checkout
      - run: node env.js prod > env.json
      - run: mkdir -p /tmp/workspace
      - run: cp env.json /tmp/workspace/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - env.json
  deploy-apex:
    docker: 
      - image: golang:1.11.5-stretch
    steps: 
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: cp /tmp/workspace/env.json ./
      - run: apt-get install -y curl
      - run: curl https://raw.githubusercontent.com/apex/apex/master/install.sh | sh
      - run: go mod download
      - run: apex version
      - run: apex deploy --env-file env.json --env prod
  deploy-terraform:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - run: apk update
      - run: apk add curl
      - run: curl https://raw.githubusercontent.com/apex/apex/master/install.sh | sh
      - run: apex infra -e prod init
      - run: apex infra -e prod apply -auto-approve
  deploy-client:
    docker:
      - image: node
    steps:
      - checkout
      - run: apt update && apt install -y python3 python3-pip
      - run: pip3 install awscli
      - run: cd client && echo "VUE_APP_TWITTER_KEY=$TWITTER_KEY" >> .env.production && echo "VUE_APP_GOOGLE_KEY=$GOOGLE_KEY" >> .env.production && yarn && yarn deploy
  notify-approval:
    docker:
      - image: node
    steps:
      - run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"Please approve workflow from <https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}|here>.\"}" \
            $SLACK_WEBHOOK_URL
  build-stg:
    docker:
      - image: node
    steps:
      - checkout
      - run: node env.js stg > env.json
      - run: mkdir -p /tmp/workspace
      - run: cp env.json /tmp/workspace/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - env.json
  deploy-apex-stg:
    docker: 
      - image: golang:1.11.5-stretch
    steps: 
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: cp /tmp/workspace/env.json ./
      - run: apt-get install -y curl
      - run: curl https://raw.githubusercontent.com/apex/apex/master/install.sh | sh
      - run: go mod download
      - run: apex version
      - run: apex deploy --env-file env.json --env stg
  deploy-terraform-stg:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - run: apk update
      - run: apk add curl
      - run: curl https://raw.githubusercontent.com/apex/apex/master/install.sh | sh
      - run: apex infra -e stg init
      - run: apex infra -e stg apply -auto-approve
  deploy-client-stg:
    docker:
      - image: node
    steps:
      - checkout
      - run: apt update && apt install -y python3 python3-pip
      - run: pip3 install awscli
      - run: cd client && echo "VUE_APP_TWITTER_KEY=$TWITTER_KEY" >> .env.production && echo "VUE_APP_GOOGLE_KEY=$GOOGLE_KEY" >> .env.production && yarn && yarn build && aws s3 sync dist s3://portals-me-stg/ --acl public-read

workflows:
  version: 2
  build-deploy:
    jobs:
      - test
      - build-stg:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy-apex-stg:
          requires:
            - test
            - build-stg
          filters:
            branches:
              only: master
      - deploy-terraform-stg:
          requires:
            - test
            - deploy-apex-stg
          filters:
            branches:
              only: master
      - deploy-client-stg:
          requires:
            - test
          filters:
            branches:
              only: master
      - notify-approval:
          requires:
            - deploy-apex-stg
            - deploy-terraform-stg
            - deploy-client-stg
      - approval:
          type: approval
          requires:
            - notify-approval
      - build:
          requires:
            - approval
      - deploy-apex:
          requires:
            - test
            - build
            - approval
          filters:
            branches:
              only: master
      - deploy-terraform:
          requires:
            - test
            - deploy-apex
            - approval
          filters:
            branches:
              only: master
      - deploy-client:
          requires:
            - test
            - approval
          filters:
            branches:
              only: master
